<!-- Advanced File Preview and Editor -->
<style>
.fpe-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.85);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 20000;
    backdrop-filter: blur(4px);
}

.fpe-modal.active {
    display: flex;
}

.fpe-modal-content {
    background: #fff;
    width: 95vw;
    height: 95vh;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    border-radius: 12px;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.5);
}

.fpe-header {
    padding: 16px 24px;
    border-bottom: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: #f9fafb;
    flex-shrink: 0;
}

.fpe-title {
    font-size: 16px;
    font-weight: 600;
    color: #1f2937;
    display: flex;
    align-items: center;
    gap: 12px;
}

.fpe-actions {
    display: flex;
    gap: 8px;
}

.fpe-btn {
    padding: 8px 16px;
    border-radius: 6px;
    border: 1px solid #d1d5db;
    background: #fff;
    color: #374151;
    font-size: 13px;
    cursor: pointer;
    transition: all 0.2s;
    display: inline-flex;
    align-items: center;
    gap: 6px;
}

.fpe-btn:hover {
    background: #f9fafb;
}

.fpe-btn-primary {
    background: #3b82f6;
    color: #fff;
    border-color: #3b82f6;
}

.fpe-btn-primary:hover {
    background: #2563eb;
}

.fpe-close-btn {
    background: none;
    border: none;
    font-size: 28px;
    color: #9ca3af;
    cursor: pointer;
    padding: 0 8px;
    line-height: 1;
}

.fpe-close-btn:hover {
    color: #1f2937;
}

.fpe-body {
    flex: 1;
    overflow: hidden;
    position: relative;
    background: #f9fafb;
}

.fpe-iframe {
    width: 100%;
    height: 100%;
    border: none;
}

.fpe-editor {
    width: 100%;
    height: 100%;
}

.fpe-image-viewer {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #000;
    position: relative;
}

.fpe-image-viewer img {
    max-width: 95%;
    max-height: 95%;
    object-fit: contain;
}

.fpe-image-controls {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.8);
    border-radius: 8px;
    padding: 8px 16px;
    display: flex;
    gap: 12px;
}

.fpe-image-controls button {
    background: none;
    border: none;
    color: #fff;
    font-size: 18px;
    cursor: pointer;
    padding: 4px 8px;
}

.fpe-image-controls button:hover {
    color: #3b82f6;
}

.fpe-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #6b7280;
}

.fpe-spinner {
    width: 48px;
    height: 48px;
    border: 4px solid #f3f4f6;
    border-top-color: #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

.fpe-tabs {
    display: flex;
    gap: 4px;
    padding: 8px 24px 0;
    border-bottom: 1px solid #e5e7eb;
    background: #f9fafb;
    flex-shrink: 0;
}

.fpe-tab {
    padding: 8px 16px;
    border: none;
    background: transparent;
    color: #6b7280;
    cursor: pointer;
    border-radius: 6px 6px 0 0;
    transition: all 0.2s;
    font-size: 14px;
}

.fpe-tab.active {
    background: #fff;
    color: #1f2937;
    font-weight: 500;
    border-bottom: 2px solid #3b82f6;
}

.fpe-tab:hover:not(.active) {
    background: #f3f4f6;
}

#fpe-filename {
    text-overflow: ellipsis;
    overflow: hidden;
    max-width: calc(100vw - 400px);
}

.fpe-video-wrapper, .fpe-audio-wrapper {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #000;
}

.fpe-video-wrapper video {
    max-width: 100%;
    max-height: 100%;
}

.fpe-audio-wrapper {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.fpe-office-viewer {
    width: 100%;
    height: 100%;
    position: relative;
}

.fpe-editor-toolbar {
    padding: 8px 16px;
    border-bottom: 1px solid #e5e7eb;
    background: #f9fafb;
    display: flex;
    gap: 8px;
    align-items: center;
}

.fpe-editor-toolbar button {
    padding: 6px 12px;
    border: 1px solid #d1d5db;
    background: #fff;
    border-radius: 4px;
    cursor: pointer;
    font-size: 13px;
}

.fpe-editor-toolbar button:hover {
    background: #f3f4f6;
}

.fpe-spreadsheet-viewer {
    width: 100%;
    height: 100%;
    overflow: auto;
    padding: 20px;
    background: #fff;
}

.fpe-spreadsheet-viewer table {
    border-collapse: collapse;
    min-width: 100%;
}

.fpe-spreadsheet-viewer th,
.fpe-spreadsheet-viewer td {
    border: 1px solid #e5e7eb;
    padding: 8px 12px;
    text-align: left;
    font-size: 13px;
}

.fpe-spreadsheet-viewer th {
    background: #f9fafb;
    font-weight: 600;
    position: sticky;
    top: 0;
    z-index: 1;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

.fpe-loading-overlay {
    position: absolute;
    inset: 0;
    background: rgba(255, 255, 255, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 100;
}

.fpe-unsupported {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #6b7280;
    padding: 40px;
    text-align: center;
}

.fpe-unsupported i {
    font-size: 64px;
    margin-bottom: 20px;
    color: #9ca3af;
}

.fpe-unsupported h3 {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 8px;
    color: #1f2937;
}

.fpe-unsupported p {
    font-size: 14px;
    margin-bottom: 20px;
}
</style>

<div class="fpe-modal" id="fpe-advanced-modal">
    <div class="fpe-modal-content">
        <div class="fpe-header">
            <div class="fpe-title">
                <i class="bi bi-file-earmark" id="fpe-adv-icon"></i>
                <span id="fpe-adv-filename">File Preview</span>
            </div>
            <div class="fpe-actions">
                <button class="fpe-btn" id="fpe-adv-download-btn">
                    <i class="bi bi-download"></i>
                    <span>Download</span>
                </button>
                <button class="fpe-btn fpe-btn-primary" id="fpe-adv-edit-btn" style="display:none">
                    <i class="bi bi-pencil"></i>
                    <span>Edit</span>
                </button>
                <button class="fpe-close-btn" id="fpe-adv-close">&times;</button>
            </div>
        </div>

        <div class="fpe-tabs" id="fpe-adv-tabs" style="display:none">
            <button class="fpe-tab active" data-tab="preview">Preview</button>
            <button class="fpe-tab" data-tab="editor">Edit</button>
        </div>

        <div class="fpe-body" id="fpe-adv-body">
            <div class="fpe-loading" id="fpe-adv-loading">
                <div class="fpe-spinner"></div>
                <p style="margin-top: 16px;">Loading file...</p>
            </div>
        </div>
    </div>
</div>

<script>
(function() {
    const modal = document.getElementById('fpe-advanced-modal');
    const body = document.getElementById('fpe-adv-body');
    const filename = document.getElementById('fpe-adv-filename');
    const icon = document.getElementById('fpe-adv-icon');
    const closeBtn = document.getElementById('fpe-adv-close');
    const downloadBtn = document.getElementById('fpe-adv-download-btn');
    const editBtn = document.getElementById('fpe-adv-edit-btn');
    const tabs = document.getElementById('fpe-adv-tabs');

    let currentFile = null;
    let currentUrl = null;
    let aceEditor = null;
    let currentMediaElement = null;

    window.openAdvancedFilePreview = function(filePath, fileName) {
        currentFile = filePath;
        const displayName = getOriginalFileName(fileName) || fileName;
        filename.textContent = displayName;

        const ext = fileName.split('.').pop().toLowerCase();
        updateIcon(ext);

        modal.classList.add('active');
        document.body.style.overflow = 'hidden';

        if (typeof window.setPreviewModalState === 'function') {
            window.setPreviewModalState(true, false);
        }

        body.innerHTML = '<div class="fpe-loading"><div class="fpe-spinner"></div><p style="margin-top: 16px;">Loading file...</p></div>';
        tabs.style.display = 'none';
        editBtn.style.display = 'none';

        currentUrl = window.fileManagerAPI + '&s=download_local&file=' + encodeURIComponent(filePath);
        downloadBtn.onclick = () => window.location = currentUrl;

        renderPreview(ext, currentUrl, fileName);
    };

    function getOriginalFileName(fileName) {
        const match = fileName.match(/^file_[a-f0-9]+_(.+)$/);
        return match ? match[1] : fileName;
    }

    function updateIcon(ext) {
        const iconMap = {
            'pdf': 'bi-file-pdf',
            'doc': 'bi-file-word', 'docx': 'bi-file-word',
            'xls': 'bi-file-excel', 'xlsx': 'bi-file-excel',
            'ppt': 'bi-file-ppt', 'pptx': 'bi-file-ppt',
            'txt': 'bi-file-text', 'csv': 'bi-file-spreadsheet',
            'jpg': 'bi-file-image', 'jpeg': 'bi-file-image', 'png': 'bi-file-image', 'gif': 'bi-file-image', 'svg': 'bi-file-image', 'webp': 'bi-file-image',
            'mp4': 'bi-file-play', 'webm': 'bi-file-play', 'avi': 'bi-file-play', 'mov': 'bi-file-play',
            'mp3': 'bi-file-music', 'wav': 'bi-file-music', 'ogg': 'bi-file-music',
            'zip': 'bi-file-zip', 'rar': 'bi-file-zip', '7z': 'bi-file-zip',
            'js': 'bi-file-code', 'html': 'bi-file-code', 'css': 'bi-file-code', 'php': 'bi-file-code', 'json': 'bi-file-code'
        };

        icon.className = 'bi ' + (iconMap[ext] || 'bi-file-earmark');
    }

    function renderPreview(ext, url, fileName) {
        body.innerHTML = '';
        stopCurrentMedia();

        if (['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg', 'bmp', 'tif', 'tiff'].includes(ext)) {
            renderImage(url);
        } else if (ext === 'pdf') {
            renderPDF(url);
        } else if (['doc', 'docx'].includes(ext)) {
            renderWordDocument(url, ext);
        } else if (['xls', 'xlsx', 'csv'].includes(ext)) {
            renderSpreadsheet(url, ext);
        } else if (['ppt', 'pptx'].includes(ext)) {
            renderPresentation(url);
        } else if (['mp4', 'webm', 'ogg', 'avi', 'mov'].includes(ext)) {
            renderVideo(url, ext);
        } else if (['mp3', 'wav', 'ogg'].includes(ext)) {
            renderAudio(url, ext);
        } else if (['txt', 'json', 'js', 'html', 'css', 'php', 'xml', 'md', 'sql', 'log'].includes(ext)) {
            renderCode(url, ext);
        } else {
            renderUnsupported(url, fileName);
        }
    }

    function renderImage(url) {
        body.innerHTML = `
            <div class="fpe-image-viewer">
                <img src="${url}" id="fpe-preview-img">
                <div class="fpe-image-controls">
                    <button onclick="zoomImage(1.2)" title="Zoom In"><i class="bi bi-zoom-in"></i></button>
                    <button onclick="zoomImage(0.8)" title="Zoom Out"><i class="bi bi-zoom-out"></i></button>
                    <button onclick="resetZoom()" title="Reset"><i class="bi bi-arrows-angle-contract"></i></button>
                </div>
            </div>
        `;

        window.imageScale = 1;
        window.zoomImage = function(factor) {
            const img = document.getElementById('fpe-preview-img');
            window.imageScale *= factor;
            img.style.transform = `scale(${window.imageScale})`;
        };
        window.resetZoom = function() {
            const img = document.getElementById('fpe-preview-img');
            window.imageScale = 1;
            img.style.transform = 'scale(1)';
        };
    }

    function renderPDF(url) {
        body.innerHTML = `<iframe class="fpe-iframe" src="${url}"></iframe>`;
    }

    function renderWordDocument(url, ext) {
        body.innerHTML = `
            <div class="fpe-office-viewer">
                <iframe class="fpe-iframe" src="https://view.officeapps.live.com/op/embed.aspx?src=${encodeURIComponent(url)}"></iframe>
            </div>
        `;

        editBtn.style.display = 'inline-flex';
        editBtn.innerHTML = '<i class="bi bi-box-arrow-up-right"></i> <span>Edit in Google Docs</span>';
        editBtn.onclick = () => window.open('https://docs.google.com/document/create', '_blank');
    }

    function renderSpreadsheet(url, ext) {
        if (ext === 'csv' || ext === 'xlsx' || ext === 'xls') {
            fetch(url)
                .then(r => r.arrayBuffer())
                .then(data => {
                    if (typeof XLSX !== 'undefined') {
                        const workbook = XLSX.read(data, { type: 'array' });
                        const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                        const html = XLSX.utils.sheet_to_html(firstSheet);
                        body.innerHTML = `<div class="fpe-spreadsheet-viewer">${html}</div>`;
                    } else {
                        body.innerHTML = `<iframe class="fpe-iframe" src="https://view.officeapps.live.com/op/embed.aspx?src=${encodeURIComponent(url)}"></iframe>`;
                    }
                })
                .catch(() => {
                    body.innerHTML = `<iframe class="fpe-iframe" src="https://view.officeapps.live.com/op/embed.aspx?src=${encodeURIComponent(url)}"></iframe>`;
                });
        }

        editBtn.style.display = 'inline-flex';
        editBtn.innerHTML = '<i class="bi bi-box-arrow-up-right"></i> <span>Edit in Google Sheets</span>';
        editBtn.onclick = () => window.open('https://sheets.google.com/create', '_blank');
    }

    function renderPresentation(url) {
        body.innerHTML = `
            <div class="fpe-office-viewer">
                <iframe class="fpe-iframe" src="https://view.officeapps.live.com/op/embed.aspx?src=${encodeURIComponent(url)}"></iframe>
            </div>
        `;

        editBtn.style.display = 'inline-flex';
        editBtn.innerHTML = '<i class="bi bi-box-arrow-up-right"></i> <span>Edit in Google Slides</span>';
        editBtn.onclick = () => window.open('https://slides.google.com/create', '_blank');
    }

    function renderVideo(url, ext) {
        const videoTypes = {
            'mp4': 'video/mp4',
            'webm': 'video/webm',
            'ogg': 'video/ogg',
            'avi': 'video/avi',
            'mov': 'video/quicktime'
        };

        body.innerHTML = `
            <div class="fpe-video-wrapper">
                <video id="fpe-video" controls style="max-width: 95%; max-height: 95%;">
                    <source src="${url}" type="${videoTypes[ext] || 'video/mp4'}">
                    Your browser does not support the video tag.
                </video>
            </div>
        `;

        currentMediaElement = document.getElementById('fpe-video');
    }

    function renderAudio(url, ext) {
        const audioTypes = {
            'mp3': 'audio/mpeg',
            'wav': 'audio/wav',
            'ogg': 'audio/ogg'
        };

        body.innerHTML = `
            <div class="fpe-audio-wrapper">
                <audio id="fpe-audio" controls style="width: 80%; max-width: 500px;">
                    <source src="${url}" type="${audioTypes[ext] || 'audio/mpeg'}">
                    Your browser does not support the audio tag.
                </audio>
            </div>
        `;

        currentMediaElement = document.getElementById('fpe-audio');
    }

    function renderCode(url, ext) {
        fetch(url)
            .then(r => r.text())
            .then(text => {
                body.innerHTML = '<div class="fpe-editor" id="fpe-ace-editor"></div>';
                if (typeof ace !== 'undefined') {
                    aceEditor = ace.edit('fpe-ace-editor');
                    aceEditor.setTheme('ace/theme/monokai');
                    aceEditor.session.setMode('ace/mode/' + getModeForExt(ext));
                    aceEditor.setValue(text, -1);
                    aceEditor.setReadOnly(true);
                    aceEditor.setOptions({
                        fontSize: "14px",
                        showPrintMargin: false
                    });
                } else {
                    body.innerHTML = '<pre style="padding:20px;overflow:auto;height:100%;margin:0;background:#fff">' + escapeHtml(text) + '</pre>';
                }

                tabs.style.display = 'flex';
                editBtn.style.display = 'inline-flex';
                editBtn.onclick = () => enableEditing();
            })
            .catch(err => {
                body.innerHTML = '<div class="fpe-unsupported"><i class="bi bi-exclamation-triangle"></i><h3>Failed to load file</h3><p>' + err.message + '</p></div>';
            });
    }

    function renderUnsupported(url, fileName) {
        body.innerHTML = `
            <div class="fpe-unsupported">
                <i class="bi bi-file-earmark"></i>
                <h3>Preview not available</h3>
                <p>This file type cannot be previewed in the browser.</p>
                <a href="${url}" class="fpe-btn fpe-btn-primary" download="${fileName}">
                    <i class="bi bi-download"></i> Download File
                </a>
            </div>
        `;
    }

    function getModeForExt(ext) {
        const modes = {
            'js': 'javascript', 'json': 'json', 'html': 'html', 'css': 'css',
            'php': 'php', 'xml': 'xml', 'sql': 'sql', 'md': 'markdown',
            'txt': 'text', 'log': 'text'
        };
        return modes[ext] || 'text';
    }

    function enableEditing() {
        if (aceEditor) {
            aceEditor.setReadOnly(false);
            editBtn.innerHTML = '<i class="bi bi-save"></i> <span>Save</span>';
            editBtn.onclick = () => saveFile();
            if (typeof window.setPreviewModalState === 'function') {
                window.setPreviewModalState(true, true);
            }
        }
    }

    function saveFile() {
        if (!aceEditor) return;

        const content = aceEditor.getValue();
        const formData = new FormData();
        formData.append('path', currentFile);
        formData.append('content', content);

        editBtn.disabled = true;
        editBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> <span>Saving...</span>';

        fetch(window.fileManagerAPI + '&s=save_file_content', {
                method: 'POST',
                body: formData
            })
            .then(r => r.json())
            .then(res => {
                if (res.status === 200) {
                    editBtn.innerHTML = '<i class="bi bi-check-circle"></i> <span>Saved</span>';
                    aceEditor.setReadOnly(true);
                    if (typeof window.setPreviewModalState === 'function') {
                        window.setPreviewModalState(true, false);
                    }
                    setTimeout(() => {
                        editBtn.innerHTML = '<i class="bi bi-pencil"></i> <span>Edit</span>';
                        editBtn.onclick = () => enableEditing();
                    }, 2000);
                } else {
                    alert('Failed to save: ' + (res.error || 'Unknown error'));
                    editBtn.innerHTML = '<i class="bi bi-pencil"></i> <span>Edit</span>';
                }
                editBtn.disabled = false;
            })
            .catch(err => {
                alert('Save failed: ' + err.message);
                editBtn.disabled = false;
                editBtn.innerHTML = '<i class="bi bi-pencil"></i> <span>Edit</span>';
            });
    }

    function stopCurrentMedia() {
        if (currentMediaElement) {
            try {
                currentMediaElement.pause();
                currentMediaElement.currentTime = 0;
                currentMediaElement = null;
            } catch (e) {}
        }
    }

    function closeModal() {
        stopCurrentMedia();
        modal.classList.remove('active');
        document.body.style.overflow = '';
        if (aceEditor) {
            aceEditor.destroy();
            aceEditor = null;
        }
        if (typeof window.setPreviewModalState === 'function') {
            window.setPreviewModalState(false, false);
        }
    }

    closeBtn.onclick = closeModal;

    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && modal.classList.contains('active')) {
            const isEditing = aceEditor && !aceEditor.getReadOnly();
            if (!isEditing) {
                closeModal();
            }
        }
    });

    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            const isEditing = aceEditor && !aceEditor.getReadOnly();
            if (!isEditing) {
                closeModal();
            }
        }
    });

    function escapeHtml(text) {
        const map = {
            '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;'
        };
        return text.replace(/[&<>"']/g, m => map[m]);
    }
})();
</script>
