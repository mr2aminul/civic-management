<?php
Global $tab;
if ($tab == 'settings') {
    if (! (Wo_IsAdmin() || Wo_IsModerator() || check_permission('manage-file-manager')) ) {
        echo Wo_LoadManagePage('permission-required/content');
        return;
    }
    echo Wo_LoadManagePage('file_manager/file_manager_api_setup', ['tab' => $tab]);
    return;
}
?>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.15.2/ace.js" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.0/jszip.min.js" crossorigin="anonymous"></script>

<style>
* {
    box-sizing: border-box;
}

.fm-container {
    max-width: 100%;
    margin: 0 auto;
    background: #f8f9fa;
    min-height: 90vh;
    padding: 0;
    position: relative;
}

.fm-header {
    background: #fff;
    border-bottom: 1px solid #e5e7eb;
    padding: 16px 24px;
    display: flex;
    align-items: center;
    gap: 16px;
    position: sticky;
    top: 0;
    z-index: 15;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
}

.fm-header-title {
    font-size: 20px;
    font-weight: 600;
    color: #1f2937;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 12px;
}

.fm-search-box {
    flex: 1;
    max-width: 600px;
    position: relative;
}

.fm-search-box input {
    width: 100%;
    padding: 10px 16px 10px 42px;
    border: 1px solid #d1d5db;
    border-radius: 24px;
    font-size: 14px;
    transition: all 0.2s;
}

.fm-search-box input:focus {
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    outline: none;
}

.fm-search-box i {
    position: absolute;
    left: 16px;
    top: 50%;
    transform: translateY(-50%);
    color: #9ca3af;
}

.fm-header-actions {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-left: auto;
}

.fm-upload-btn {
    background: #3b82f6;
    color: #fff;
    border: none;
    padding: 10px 20px;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.2s;
}

.fm-upload-btn:hover {
    background: #2563eb;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
}

.fm-body {
    display: flex;
    height: calc(100vh - 72px);
}

.fm-sidebar {
    width: 260px;
    background: #fff;
    border-right: 1px solid #e5e7eb;
    padding: 16px 0;
    overflow-y: auto;
}

.fm-sidebar-item {
    padding: 10px 20px;
    display: flex;
    align-items: center;
    gap: 12px;
    color: #4b5563;
    cursor: pointer;
    transition: all 0.2s;
    font-size: 14px;
}

.fm-sidebar-item:hover {
    background: #f3f4f6;
}

.fm-sidebar-item.active {
    background: #eff6ff;
    color: #3b82f6;
    font-weight: 500;
    border-right: 3px solid #3b82f6;
}

.fm-sidebar-section {
    padding: 20px 20px 8px;
    font-size: 11px;
    font-weight: 600;
    text-transform: uppercase;
    color: #9ca3af;
    letter-spacing: 0.5px;
}

.fm-content-area {
    flex: 1;
    overflow-y: auto;
    padding: 24px;
    position: relative;
}

.fm-content-area.drag-over::before {
    content: '';
    position: absolute;
    inset: 0;
    background: rgba(59, 130, 246, 0.1);
    border: 3px dashed #3b82f6;
    border-radius: 12px;
    pointer-events: none;
    z-index: 10;
}

.fm-toolbar {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 20px;
    flex-wrap: wrap;
}

.fm-breadcrumb {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 14px;
    flex: 1;
}

.fm-breadcrumb-item {
    color: #6b7280;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: color 0.2s;
}

.fm-breadcrumb-item:hover {
    color: #3b82f6;
}

.fm-breadcrumb-item.active {
    color: #1f2937;
    font-weight: 500;
}

.fm-view-toggle {
    display: flex;
    gap: 4px;
    background: #f3f4f6;
    padding: 4px;
    border-radius: 6px;
}

.fm-view-btn {
    padding: 6px 12px;
    border: none;
    background: transparent;
    cursor: pointer;
    border-radius: 4px;
    color: #6b7280;
    transition: all 0.2s;
}

.fm-view-btn.active {
    background: #fff;
    color: #3b82f6;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
}

.fm-items-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
    gap: 16px;
    margin-bottom: 24px;
}

.fm-item-card {
    background: #fff;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 12px;
    cursor: pointer;
    transition: all 0.2s;
    position: relative;
    user-select: none;
}

.fm-item-card:hover {
    border-color: #3b82f6;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    transform: translateY(-2px);
}

.fm-item-card.selected {
    border-color: #3b82f6;
    background: #eff6ff;
}

.fm-item-icon {
    font-size: 48px;
    color: #3b82f6;
    text-align: center;
    margin-bottom: 8px;
}

.fm-item-name {
    font-size: 13px;
    color: #1f2937;
    text-align: center;
    word-break: break-word;
    margin-bottom: 4px;
}

.fm-item-meta {
    font-size: 11px;
    color: #9ca3af;
    text-align: center;
}

.fm-item-checkbox {
    position: absolute;
    top: 8px;
    left: 8px;
    width: 20px;
    height: 20px;
    cursor: pointer;
}

.fm-items-list {
    background: #fff;
    border-radius: 8px;
    border: 1px solid #e5e7eb;
}

.fm-list-header {
    display: grid;
    grid-template-columns: 40px 1fr 120px 140px 100px;
    padding: 12px 16px;
    border-bottom: 1px solid #e5e7eb;
    font-size: 12px;
    font-weight: 600;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.fm-list-item {
    display: grid;
    grid-template-columns: 40px 1fr 120px 140px 100px;
    padding: 12px 16px;
    border-bottom: 1px solid #f3f4f6;
    align-items: center;
    cursor: pointer;
    transition: background 0.2s;
    user-select: none;
}

.fm-list-item:hover {
    background: #f9fafb;
}

.fm-list-item.selected {
    background: #eff6ff;
}

.fm-list-item-name {
    display: flex;
    align-items: center;
    gap: 12px;
    font-size: 14px;
    color: #1f2937;
}

.fm-list-item-icon {
    font-size: 20px;
    color: #3b82f6;
}

.fm-context-menu {
    position: fixed;
    background: #fff;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    padding: 8px 0;
    min-width: 200px;
    z-index: 99999;
    display: none;
}

.fm-context-menu-item {
    padding: 10px 16px;
    font-size: 14px;
    color: #374151;
    cursor: pointer;
    transition: background 0.2s;
    display: flex;
    align-items: center;
    gap: 12px;
}

.fm-context-menu-item:hover {
    background: #f3f4f6;
}

.fm-context-menu-item.danger {
    color: #dc2626;
}

.fm-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 10000;
}

.fm-modal.active {
    display: flex;
}

.fm-modal-content {
    background: #fff;
    border-radius: 12px;
    padding: 24px;
    max-width: 900px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
}

.fm-modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 20px;
}

.fm-modal-title {
    font-size: 18px;
    font-weight: 600;
    color: #1f2937;
}

.fm-modal-close {
    background: none;
    border: none;
    font-size: 24px;
    color: #9ca3af;
    cursor: pointer;
}

.fm-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 16px;
    margin-bottom: 24px;
}

.fm-stat-card {
    background: #fff;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 16px;
}

.fm-stat-label {
    font-size: 12px;
    color: #6b7280;
    margin-bottom: 4px;
}

.fm-stat-value {
    font-size: 24px;
    font-weight: 600;
    color: #1f2937;
}

.fm-empty-state {
    text-align: center;
    padding: 60px 20px;
}

.fm-empty-icon {
    font-size: 64px;
    color: #d1d5db;
    margin-bottom: 16px;
}

.fm-empty-text {
    font-size: 16px;
    color: #6b7280;
}

.fm-btn-group {
    display: flex;
    gap: 8px;
}

.fm-btn {
    padding: 8px 16px;
    border-radius: 6px;
    border: 1px solid #d1d5db;
    background: #fff;
    color: #374151;
    font-size: 13px;
    cursor: pointer;
    transition: all 0.2s;
}

.fm-btn:hover {
    background: #f9fafb;
    border-color: #9ca3af;
}

.fm-btn-primary {
    background: #3b82f6;
    color: #fff;
    border-color: #3b82f6;
}

.fm-btn-primary:hover {
    background: #2563eb;
}

.fm-btn-danger {
    background: #dc2626;
    color: #fff;
    border-color: #dc2626;
}

.fm-btn-danger:hover {
    background: #b91c1c;
}

.fm-selection-rect {
    position: fixed;
    border: 2px solid #3b82f6;
    background: rgba(59, 130, 246, 0.1);
    pointer-events: none;
    z-index: 100;
    display: none;
}

@media (max-width: 768px) {
    .fm-sidebar {
        display: none;
    }

    .fm-items-grid {
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    }

    .fm-list-item {
        grid-template-columns: 40px 1fr 80px;
    }

    .fm-list-item>div:nth-child(4),
    .fm-list-item>div:nth-child(5) {
        display: none;
    }

    .fm-list-header>div:nth-child(4),
    .fm-list-header>div:nth-child(5) {
        display: none;
    }

    .fm-upload-popup {
        bottom: 70px !important;
        right: 10px !important;
        max-width: 90% !important;
    }

    #fm-new-folder-btn,
    .fm-header-title span,
    .fm-header-actions span,
    .fpe-actions span {
        display: none;
    }
}

.wrapper .page-content {
    padding: 0rem !important;
}

.fm-upload-popup {
    position: fixed;
    bottom: 24px;
    right: 24px;
    width: 380px;
    max-height: 500px;
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
    z-index: 10000;
    display: none;
    flex-direction: column;
    overflow: hidden;
    animation: slideUp 0.3s ease;
}

.fm-upload-popup.active {
    display: flex;
}

@keyframes slideUp {
    from {
        transform: translateY(100px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }
}

.fm-upload-popup-header {
    padding: 16px 20px;
    border-bottom: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: #f9fafb;
}

.fm-upload-popup-title {
    font-size: 15px;
    font-weight: 600;
    color: #1f2937;
    display: flex;
    align-items: center;
    gap: 8px;
}

.fm-upload-popup-actions {
    display: flex;
    gap: 8px;
}

.fm-upload-popup-btn {
    background: none;
    border: none;
    color: #6b7280;
    cursor: pointer;
    padding: 4px 8px;
    border-radius: 4px;
    transition: all 0.2s;
}

.fm-upload-popup-btn:hover {
    background: #e5e7eb;
    color: #1f2937;
}

.fm-upload-popup-body {
    flex: 1;
    overflow-y: auto;
    padding: 12px;
}

.fm-upload-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px;
    border-radius: 8px;
    background: #f9fafb;
    margin-bottom: 8px;
    transition: all 0.2s;
}

.fm-upload-item.completed {
    background: #ecfdf5;
}

.fm-upload-item.error {
    background: #fef2f2;
}

.fm-upload-item-icon {
    font-size: 24px;
    color: #3b82f6;
}

.fm-upload-item.completed .fm-upload-item-icon {
    color: #10b981;
}

.fm-upload-item.error .fm-upload-item-icon {
    color: #ef4444;
}

.fm-upload-item-details {
    flex: 1;
    min-width: 0;
}

.fm-upload-item-name {
    font-size: 13px;
    font-weight: 500;
    color: #1f2937;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.fm-upload-item-progress {
    font-size: 11px;
    color: #6b7280;
    margin-top: 4px;
}

.fm-upload-item-bar {
    width: 100%;
    height: 4px;
    background: #e5e7eb;
    border-radius: 2px;
    overflow: hidden;
    margin-top: 6px;
}

.fm-upload-item-bar-fill {
    height: 100%;
    background: #3b82f6;
    transition: width 0.3s ease;
}

.fm-upload-item.completed .fm-upload-item-bar-fill {
    background: #10b981;
}

.fm-upload-item.error .fm-upload-item-bar-fill {
    background: #ef4444;
}

.fm-notification {
    position: fixed;
    top: 80px;
    right: 24px;
    min-width: 320px;
    max-width: 400px;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    padding: 16px;
    display: flex;
    align-items: flex-start;
    gap: 12px;
    z-index: 10001;
    animation: slideInRight 0.3s ease;
}

@keyframes slideInRight {
    from {
        transform: translateX(400px);
        opacity: 0;
    }

    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.fm-notification.success {
    border-left: 4px solid #10b981;
}

.fm-notification.error {
    border-left: 4px solid #ef4444;
}

.fm-notification-icon {
    font-size: 20px;
    margin-top: 2px;
}

.fm-notification.success .fm-notification-icon {
    color: #10b981;
}

.fm-notification.error .fm-notification-icon {
    color: #ef4444;
}

.fm-notification-content {
    flex: 1;
}

.fm-notification-title {
    font-size: 14px;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 4px;
}

.fm-notification-message {
    font-size: 13px;
    color: #6b7280;
}

.fm-notification-close {
    background: none;
    border: none;
    color: #9ca3af;
    cursor: pointer;
    padding: 0;
    font-size: 18px;
    line-height: 1;
}

.fm-notification-close:hover {
    color: #1f2937;
}
</style>

<div class="fm-container">
    <div class="fm-header">
        <h1 class="fm-header-title">
            <i class="bi bi-folder2-open"></i>
            <span>File Manager</span>
        </h1>
        <div class="fm-search-box">
            <i class="bi bi-search"></i>
            <input type="text" id="fm-search" placeholder="Search files and folders...">
        </div>
        <div class="fm-header-actions">
            <button class="fm-btn" id="fm-new-folder-btn">
                <i class="bi bi-folder-plus"></i> <span>New Folder</span>
            </button>
            <button class="fm-upload-btn" id="fm-upload-btn">
                <i class="bi bi-cloud-upload"></i> <span>Upload</span>
            </button>
            <input type="file" id="fm-file-input" multiple style="display:none">
        </div>
    </div>

    <div class="fm-body">
        <div class="fm-sidebar">
            <div class="fm-sidebar-item active" data-view="all">
                <i class="bi bi-folder"></i> All Files
            </div>
            <div class="fm-sidebar-item" data-view="recent">
                <i class="bi bi-clock-history"></i> Recent
            </div>
            <div class="fm-sidebar-item" data-view="images">
                <i class="bi bi-image"></i> Images
            </div>
            <div class="fm-sidebar-item" data-view="documents">
                <i class="bi bi-file-text"></i> Documents
            </div>
            <div class="fm-sidebar-item" data-view="trash">
                <i class="bi bi-trash"></i> Recycle Bin
            </div>
            <div class="fm-sidebar-section">Storage</div>
            <div class="fm-sidebar-item">
                <i class="bi bi-pie-chart"></i>
                <div style="flex:1">
                    <div style="font-size:11px;color:#9ca3af">Storage Used</div>
                    <div style="font-weight:600;font-size:13px" id="fm-storage-text">-- / --</div>
                </div>
            </div>
            <div class="fm-sidebar-section">Cloud</div>
            <div class="fm-sidebar-item" id="fm-r2-status-item">
                <i class="bi bi-cloud"></i>
                <div style="flex:1">
                    <div>R2 Storage</div>
                    <div style="font-size:11px;color:#9ca3af" id="fm-r2-status">Checking...</div>
                </div>
            </div>
        </div>

        <div class="fm-content-area" id="fm-content-area">
            <div class="fm-toolbar">
                <div class="fm-breadcrumb" id="fm-breadcrumb">
                    <div class="fm-breadcrumb-item active" data-path="">
                        <i class="bi bi-house"></i> Home
                    </div>
                </div>
                <select id="fm-sort-select" class="fm-btn">
                    <option value="name_asc">Name (A-Z)</option>
                    <option value="name_desc">Name (Z-A)</option>
                    <option value="date_desc">Newest First</option>
                    <option value="date_asc">Oldest First</option>
                    <option value="size_desc">Largest First</option>
                </select>
                <div class="fm-view-toggle">
                    <button class="fm-view-btn active" data-view="grid"><i class="bi bi-grid-3x3-gap"></i></button>
                    <button class="fm-view-btn" data-view="list"><i class="bi bi-list-ul"></i></button>
                </div>
            </div>

            <div class="fm-stats" id="fm-stats">
                <div class="fm-stat-card">
                    <div class="fm-stat-label">Total Items</div>
                    <div class="fm-stat-value" id="stat-total">0</div>
                </div>
                <div class="fm-stat-card">
                    <div class="fm-stat-label">Folders</div>
                    <div class="fm-stat-value" id="stat-folders">0</div>
                </div>
                <div class="fm-stat-card">
                    <div class="fm-stat-label">Files</div>
                    <div class="fm-stat-value" id="stat-files">0</div>
                </div>
                <div class="fm-stat-card">
                    <div class="fm-stat-label">Selected</div>
                    <div class="fm-stat-value" id="stat-selected">0</div>
                </div>
            </div>

            <div id="fm-items-container">
                <div id="fm-items-grid" class="fm-items-grid"></div>
                <div id="fm-items-list" class="fm-items-list" style="display:none"></div>
            </div>

            <div class="fm-empty-state" id="fm-empty-state" style="display:none">
                <div class="fm-empty-icon"><i class="bi bi-folder-x"></i></div>
                <div class="fm-empty-text">This folder is empty</div>
            </div>
        </div>
    </div>
</div>

<div class="fm-context-menu" id="fm-context-menu"></div>
<div class="fm-selection-rect" id="fm-selection-rect"></div>

<div class="fm-modal" id="fm-preview-modal">
    <div class="fm-modal-content">
        <div class="fm-modal-header">
            <div class="fm-modal-title" id="fm-preview-title">File Preview</div>
            <button class="fm-modal-close"
                onclick="document.getElementById('fm-preview-modal').classList.remove('active')">&times;</button>
        </div>
        <div id="fm-preview-area"></div>
    </div>
</div>

<div class="fm-upload-popup" id="fm-upload-popup">
    <div class="fm-upload-popup-header">
        <div class="fm-upload-popup-title">
            <i class="bi bi-cloud-upload"></i>
            <span id="fm-upload-popup-count">0 uploads</span>
        </div>
        <div class="fm-upload-popup-actions">
            <button class="fm-upload-popup-btn" id="fm-upload-minimize" title="Minimize">
                <i class="bi bi-dash"></i>
            </button>
            <button class="fm-upload-popup-btn" id="fm-upload-clear" title="Clear completed">
                <i class="bi bi-x-circle"></i>
            </button>
            <button class="fm-upload-popup-btn" id="fm-upload-close" title="Close">
                <i class="bi bi-x"></i>
            </button>
        </div>
    </div>
    <div class="fm-upload-popup-body" id="fm-upload-popup-body"></div>
</div>

<div id="fm-notifications-container" style="position:fixed;top:80px;right:24px;z-index:10001"></div>

<?php include __DIR__ . '/advanced_preview.phtml'; ?>

<script>
jQuery(function($) {
    const API = Wo_Ajax_Requests_File() + '?f=file_manager';
    let currentPath = '';
    let selected = new Set();
    let currentView = 'grid';
    let currentFilter = 'all';
    let items = [];
    let ctxTarget = null;
    let dragSelectStart = null;

    function escapeHtml(s) {
        return String(s).replace(/[&<>"']/g, m => ({
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;'
        } [m]));
    }

    function formatSize(bytes) {
        if (!bytes) return '0 B';
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        let i = Math.floor(Math.log(bytes) / Math.log(1024));
        if (isNaN(i) || !isFinite(i)) i = 0;
        if (i < 0) i = 0;
        if (i > 4) i = 4;
        return (bytes / Math.pow(1024, i)).toFixed(1) + ' ' + sizes[i];
    }

    function loadQuota() {
        $.get(API + '&s=get_user_quota', res => {
            if (res && res.status == 200) $('#fm-storage-text').text(formatSize(res.used) + ' / ' +
                formatSize(res.quota));
        }, 'json').fail(() => $('#fm-storage-text').text('--'));
    }

    function checkR2() {
        $.get(API + '&s=ping', res => {
            if (res && res.status === 200) $('#fm-r2-status').text(res.r2_enabled ? 'Connected' :
                'Not Configured');
            else $('#fm-r2-status').text('Unknown');
        }, 'json').fail(() => $('#fm-r2-status').text('Error'));
    }

    function setBreadcrumb(path) {
        const $bc = $('#fm-breadcrumb').empty();
        $bc.append('<div class="fm-breadcrumb-item' + (path ? '' : ' active') +
            '" data-path=""><i class="bi bi-house"></i> Home</div>');
        if (!path) return;
        const parts = path.split('/');
        let acc = [];
        parts.forEach((p, i) => {
            acc.push(p);
            const pp = acc.join('/');
            const active = i === parts.length - 1;
            $bc.append('<span><i class="bi bi-chevron-right"></i></span>');
            $bc.append('<div class="fm-breadcrumb-item' + (active ? ' active' : '') + '" data-path="' +
                pp + '">' + escapeHtml(p) + '</div>');
        });
    }

    function loadFolder(path) {
        if (currentFilter !== 'all') {
            currentFilter = 'all';
            $('.fm-sidebar-item').removeClass('active');
            $('.fm-sidebar-item[data-view="all"]').addClass('active');
        }

        $.get(API + '&s=list_local_folder', {
            path: path
        }, res => {
            if (!res || res.status !== 200) return;
            currentPath = path || '';
            setBreadcrumb(currentPath);
            items = [
                ...(res.folders || []).map(f => ({
                    ...f,
                    type: 'folder'
                })),
                ...(res.files || []).map(f => ({
                    ...f,
                    type: 'file'
                }))
            ];
            renderItems();
            updateStats();
        }, 'json');
    }

    function filterItems() {
        let filtered = items.slice();

        if (currentFilter === 'recent') {
            filtered = filtered.filter(i => i.type === 'file').sort((a, b) => (b.mtime || 0) - (a.mtime || 0))
                .slice(0, 50);
        } else if (currentFilter === 'images') {
            const imgExts = ['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp', 'bmp'];
            filtered = filtered.filter(i => {
                if (i.type === 'folder') return false;
                const ext = i.name.split('.').pop().toLowerCase();
                return imgExts.includes(ext);
            });
        } else if (currentFilter === 'documents') {
            const docExts = ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'txt', 'ppt', 'pptx'];
            filtered = filtered.filter(i => {
                if (i.type === 'folder') return false;
                const ext = i.name.split('.').pop().toLowerCase();
                return docExts.includes(ext);
            });
        }

        const searchTerm = $('#fm-search').val().toLowerCase().trim();
        if (searchTerm) {
            filtered = filtered.filter(i => i.name.toLowerCase().includes(searchTerm));
        }

        return filtered;
    }

    function sortItems(items) {
        const sort = $('#fm-sort-select').val();
        const sorted = items.slice();
        if (sort === 'name_asc') sorted.sort((a, b) => a.name.localeCompare(b.name));
        else if (sort === 'name_desc') sorted.sort((a, b) => b.name.localeCompare(a.name));
        else if (sort === 'date_desc') sorted.sort((a, b) => (b.mtime || 0) - (a.mtime || 0));
        else if (sort === 'date_asc') sorted.sort((a, b) => (a.mtime || 0) - (b.mtime || 0));
        else if (sort === 'size_desc') sorted.sort((a, b) => (b.size || 0) - (a.size || 0));
        return sorted;
    }

    function getOriginalFileName(fileName) {
        const match = fileName.match(/^file_[a-f0-9]+_(.+)$/);
        return match ? match[1] : fileName;
    }

    function renderItems() {
        const filtered = filterItems();
        const sorted = sortItems(filtered);

        if (sorted.length === 0) {
            $('#fm-items-grid, #fm-items-list').empty().hide();
            $('#fm-empty-state').show();
            return;
        }

        $('#fm-empty-state').hide();

        if (currentView === 'grid') {
            $('#fm-items-list').hide();
            $('#fm-items-grid').show().empty();
            sorted.forEach(item => {
                const isFolder = item.type === 'folder';
                const icon = isFolder ? 'bi-folder-fill' : getFileIcon(item.name);
                const displayName = isFolder ? item.name : getOriginalFileName(item.name);
                const $card = $(`
          <div class="fm-item-card" data-path="${escapeHtml(item.path)}" data-type="${item.type}">
            ${!isFolder ? '<input type="checkbox" class="fm-item-checkbox">' : ''}
            <div class="fm-item-icon"><i class="bi ${icon}"></i></div>
            <div class="fm-item-name">${escapeHtml(displayName)}</div>
            <div class="fm-item-meta">${isFolder ? 'Folder' : formatSize(item.size)}</div>
          </div>
        `);
                $('#fm-items-grid').append($card);
            });
        } else {
            $('#fm-items-grid').hide();
            $('#fm-items-list').show().empty();
            $('#fm-items-list').append(`
        <div class="fm-list-header">
          <div></div>
          <div>Name</div>
          <div>Size</div>
          <div>Modified</div>
          <div>Actions</div>
        </div>
      `);
            sorted.forEach(item => {
                const isFolder = item.type === 'folder';
                const icon = isFolder ? 'bi-folder-fill' : getFileIcon(item.name);
                const date = item.mtime ? new Date(item.mtime * 1000).toLocaleDateString() : '--';
                const displayName = isFolder ? item.name : getOriginalFileName(item.name);
                const $row = $(`
          <div class="fm-list-item" data-path="${escapeHtml(item.path)}" data-type="${item.type}">
            <div>${!isFolder ? '<input type="checkbox" class="fm-item-checkbox">' : ''}</div>
            <div class="fm-list-item-name">
              <i class="fm-list-item-icon bi ${icon}"></i>
              <span>${escapeHtml(displayName)}</span>
            </div>
            <div>${isFolder ? '--' : formatSize(item.size)}</div>
            <div>${date}</div>
            <div>
              ${isFolder ? `<button class="fm-btn" data-action="open-folder">Open</button>` : `<button class="fm-btn" data-action="download-file">Download</button>`}
            </div>
          </div>
        `);
                $('#fm-items-list').append($row);
            });
        }
    }

    function getFileIcon(name) {
        const ext = name.split('.').pop().toLowerCase();
        if (['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp'].includes(ext)) return 'bi-file-image';
        if (['pdf'].includes(ext)) return 'bi-file-pdf';
        if (['doc', 'docx'].includes(ext)) return 'bi-file-word';
        if (['xls', 'xlsx'].includes(ext)) return 'bi-file-excel';
        if (['zip', 'rar', '7z'].includes(ext)) return 'bi-file-zip';
        if (['mp4', 'avi', 'mov'].includes(ext)) return 'bi-file-play';
        if (['mp3', 'wav'].includes(ext)) return 'bi-file-music';
        if (['txt', 'log'].includes(ext)) return 'bi-file-text';
        if (['js', 'php', 'html', 'css', 'json'].includes(ext)) return 'bi-file-code';
        return 'bi-file-earmark';
    }

    function updateStats() {
        const filtered = filterItems();
        const folders = filtered.filter(i => i.type === 'folder').length;
        const files = filtered.filter(i => i.type === 'file').length;
        $('#stat-total').text(filtered.length);
        $('#stat-folders').text(folders);
        $('#stat-files').text(files);
        $('#stat-selected').text(selected.size);
    }

    $(document).on('click', '.fm-item-card[data-type="folder"], .fm-list-item[data-type="folder"]', function(
        e) {
        if ($(e.target).is('input, button')) return;
        const path = $(this).data('path');
        loadFolder(path);
    });

    $(document).on('click', '[data-action="open-folder"]', function() {
        const path = $(this).closest('.fm-list-item').data('path');
        loadFolder(path);
    });

    $(document).on('click', '[data-action="download-file"]', function() {
        const path = $(this).closest('.fm-list-item').data('path');
        window.location = API + '&s=download_local&file=' + encodeURIComponent(path);
    });

    $(document).on('change', '.fm-item-checkbox', function(e) {
        e.stopPropagation();
        const path = $(this).closest('[data-path]').data('path');
        if (this.checked) selected.add(path);
        else selected.delete(path);
        $(this).closest('[data-path]').toggleClass('selected', this.checked);
        updateStats();
    });

    $(document).on('click', '.fm-item-card[data-type="file"], .fm-list-item[data-type="file"]', function(e) {
        if ($(e.target).is('input, button')) return;
        const path = $(this).data('path');
        const fileName = $(this).data('path').split('/').pop();

        if (e.ctrlKey || e.metaKey) {
            const isSelected = selected.has(path);
            if (isSelected) {
                selected.delete(path);
                $(this).removeClass('selected').find('.fm-item-checkbox').prop('checked', false);
            } else {
                selected.add(path);
                $(this).addClass('selected').find('.fm-item-checkbox').prop('checked', true);
            }
            updateStats();
        } else {
            window.fileManagerAPI = API;
            if (typeof window.openAdvancedFilePreview === 'function') {
                window.openAdvancedFilePreview(path, fileName);
            } else {
                openPreview(path);
            }
        }
    });

    $(document).on('click', '.fm-breadcrumb-item', function() {
        const path = $(this).data('path');
        loadFolder(path);
    });

    $('.fm-view-btn').on('click', function() {
        $('.fm-view-btn').removeClass('active');
        $(this).addClass('active');
        currentView = $(this).data('view');
        renderItems();
    });

    $('#fm-sort-select').on('change', () => renderItems());
    $('#fm-search').on('input', () => renderItems());

    $('.fm-sidebar-item[data-view]').on('click', function() {
        const view = $(this).data('view');

        if (view === 'trash') {
            alert('Recycle Bin feature coming soon!');
            return;
        }

        $('.fm-sidebar-item').removeClass('active');
        $(this).addClass('active');
        currentFilter = view;
        renderItems();
        updateStats();
    });

    $('#fm-upload-btn').on('click', () => $('#fm-file-input').click());

    $('#fm-file-input').on('change', function() {
        if (this.files.length) uploadFiles(this.files);
    });

    const contentArea = document.getElementById('fm-content-area');

    contentArea.addEventListener('dragover', e => {
        e.preventDefault();
        contentArea.classList.add('drag-over');
    });

    contentArea.addEventListener('dragleave', e => {
        if (e.target === contentArea) {
            contentArea.classList.remove('drag-over');
        }
    });

    contentArea.addEventListener('drop', e => {
        e.preventDefault();
        contentArea.classList.remove('drag-over');
        if (e.dataTransfer.files.length) uploadFiles(e.dataTransfer.files);
    });

    let uploadQueue = [];
    let uploadCounter = 0;

    function showNotification(message, type = 'success') {
        const id = 'notif-' + Date.now();
        const $notif = $(`
      <div class="fm-notification ${type}" id="${id}">
        <div class="fm-notification-icon">
          <i class="bi ${type === 'success' ? 'bi-check-circle-fill' : 'bi-x-circle-fill'}"></i>
        </div>
        <div class="fm-notification-content">
          <div class="fm-notification-message">${message}</div>
        </div>
        <button class="fm-notification-close">&times;</button>
      </div>
    `);

        $('#fm-notifications-container').append($notif);

        $notif.find('.fm-notification-close').on('click', function() {
            $notif.remove();
        });

        setTimeout(() => $notif.remove(), 5000);
    }

    function pos5_success_noti(message) {
        showNotification(message, 'success');
    }

    function pos4_error_noti(message) {
        showNotification(message, 'error');
    }

    function showUploadPopup() {
        $('#fm-upload-popup').addClass('active');
    }

    function hideUploadPopup() {
        $('#fm-upload-popup').removeClass('active');
    }

    function updateUploadCount() {
        const total = uploadQueue.length;
        const completed = uploadQueue.filter(u => u.status === 'completed' || u.status === 'error').length;
        $('#fm-upload-popup-count').text(completed + ' / ' + total + ' complete');
    }

    function addUploadItem(file) {
        const id = 'upload-' + (++uploadCounter);
        const item = {
            id: id,
            file: file,
            status: 'pending',
            progress: 0
        };

        uploadQueue.push(item);

        const $item = $(`
      <div class="fm-upload-item" id="${id}">
        <div class="fm-upload-item-icon">
          <i class="bi bi-file-earmark"></i>
        </div>
        <div class="fm-upload-item-details">
          <div class="fm-upload-item-name">${escapeHtml(file.name)}</div>
          <div class="fm-upload-item-progress">Preparing...</div>
          <div class="fm-upload-item-bar">
            <div class="fm-upload-item-bar-fill" style="width:0%"></div>
          </div>
        </div>
      </div>
    `);

        $('#fm-upload-popup-body').append($item);
        showUploadPopup();
        updateUploadCount();

        return item;
    }

    function updateUploadItem(id, status, progress, message) {
        const $item = $('#' + id);
        const item = uploadQueue.find(u => u.id === id);

        if (item) {
            item.status = status;
            item.progress = progress;
        }

        $item.removeClass('pending completed error').addClass(status);
        $item.find('.fm-upload-item-progress').text(message || '');
        $item.find('.fm-upload-item-bar-fill').css('width', progress + '%');

        updateUploadCount();
    }

    function uploadFiles(files) {
        const fileArray = Array.from(files);

        fileArray.forEach(file => {
            const item = addUploadItem(file);
            uploadSingleFile(item);
        });
    }

    function uploadSingleFile(item) {
        const form = new FormData();
        form.append('files[]', item.file);
        form.append('subdir', currentPath);

        updateUploadItem(item.id, 'pending', 10, 'Uploading...');

        $.ajax({
            url: API + '&s=upload_local',
            type: 'POST',
            data: form,
            processData: false,
            contentType: false,
            xhr: function() {
                const xhr = new window.XMLHttpRequest();
                xhr.upload.addEventListener('progress', function(e) {
                    if (e.lengthComputable) {
                        const percent = Math.round((e.loaded / e.total) * 90) + 10;
                        updateUploadItem(item.id, 'pending', percent, 'Uploading...');
                    }
                });
                return xhr;
            },
            success: res => {
                if (res && res.status === 200) {
                    updateUploadItem(item.id, 'completed', 100, 'Complete');

                    const allCompleted = uploadQueue.every(u => u.status === 'completed' || u
                        .status === 'error');
                    if (allCompleted) {
                        pos5_success_noti('All uploads completed');
                        loadFolder(currentPath);
                        loadQuota();
                    }
                } else {
                    updateUploadItem(item.id, 'error', 100, 'Failed');
                    pos4_error_noti('Upload failed: ' + item.file.name);
                }
            },
            error: () => {
                updateUploadItem(item.id, 'error', 100, 'Failed');
                pos4_error_noti('Upload failed: ' + item.file.name);
            }
        });
    }

    $('#fm-upload-close').on('click', hideUploadPopup);

    $('#fm-upload-clear').on('click', function() {
        uploadQueue = uploadQueue.filter(u => u.status === 'pending');
        $('.fm-upload-item.completed, .fm-upload-item.error').remove();
        updateUploadCount();
        if (uploadQueue.length === 0) hideUploadPopup();
    });

    $('#fm-new-folder-btn').on('click', function() {
        const name = prompt('Enter folder name:');
        if (!name) return;
        const path = currentPath ? currentPath + '/' + name : name;
        $.post(API + '&s=create_folder', {
            path
        }, res => {
            if (res && res.status === 200) {
                pos5_success_noti('Folder created successfully');
                loadFolder(currentPath);
            } else {
                pos4_error_noti('Failed to create folder');
            }
        }, 'json');
    });

    $(document).on('contextmenu', '.fm-item-card, .fm-list-item', function(e) {
        e.preventDefault();
        ctxTarget = $(this);
        showContextMenu(e, 'file');
    });

    $(document).on('contextmenu', '#fm-content-area', function(e) {
        if ($(e.target).closest('.fm-item-card, .fm-list-item').length) return;
        e.preventDefault();
        ctxTarget = null;
        showContextMenu(e, 'empty');
    });

    function showContextMenu(e, type) {
        const $menu = $('#fm-context-menu').empty();

        if (type === 'empty') {
            $menu.append(`
        <div class="fm-context-menu-item" data-action="new-file"><i class="bi bi-file-plus"></i> New File</div>
        <div class="fm-context-menu-item" data-action="new-folder"><i class="bi bi-folder-plus"></i> New Folder</div>
        <div class="fm-context-menu-item" data-action="upload"><i class="bi bi-cloud-upload"></i> Upload</div>
      `);
        } else {
            const type = ctxTarget.data('type');
            if (type === 'file') {
                $menu.append(`
          <div class="fm-context-menu-item" data-action="preview"><i class="bi bi-eye"></i> Preview</div>
          <div class="fm-context-menu-item" data-action="download"><i class="bi bi-download"></i> Download</div>
          <div class="fm-context-menu-item" data-action="rename"><i class="bi bi-pencil"></i> Rename</div>
          <div class="fm-context-menu-item" data-action="move"><i class="bi bi-folder-symlink"></i> Move</div>
          <div class="fm-context-menu-item" data-action="upload_r2"><i class="bi bi-cloud-upload"></i> Upload to R2</div>
          <div class="fm-context-menu-item danger" data-action="delete"><i class="bi bi-trash"></i> Delete</div>
        `);
            } else {
                $menu.append(`
          <div class="fm-context-menu-item" data-action="open"><i class="bi bi-folder-open"></i> Open</div>
          <div class="fm-context-menu-item" data-action="rename"><i class="bi bi-pencil"></i> Rename</div>
          <div class="fm-context-menu-item danger" data-action="delete"><i class="bi bi-trash"></i> Delete</div>
        `);
            }
        }

        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;

        $menu.css({
            left: e.clientX + scrollLeft,
            top: e.clientY + scrollTop
        }).show();
    }

    $(document).on('click', function(e) {
        if (!$(e.target).closest('#fm-context-menu').length) $('#fm-context-menu').hide();
    });

    $(document).on('click', '.fm-context-menu-item', function() {
        const action = $(this).data('action');
        $('#fm-context-menu').hide();

        if (action === 'upload' || action === 'new-file') {
            $('#fm-file-input').click();
        } else if (action === 'new-folder') {
            $('#fm-new-folder-btn').click();
        } else if (!ctxTarget) {
            return;
        } else {
            const path = ctxTarget.data('path');
            const type = ctxTarget.data('type');

            if (action === 'open' && type === 'folder') {
                loadFolder(path);
            } else if (action === 'download' && type === 'file') {
                window.location = API + '&s=download_local&file=' + encodeURIComponent(path);
                pos5_success_noti('Download started');
            } else if (action === 'delete') {
                if (!confirm('Delete ' + path + '?')) return;
                $.post(API + '&s=delete_local', {
                    path
                }, res => {
                    if (res && res.status === 200) {
                        pos5_success_noti(res.message || 'Deleted successfully');
                        loadFolder(currentPath);
                    } else {
                        pos4_error_noti(res.error || 'Delete failed');
                    }
                }, 'json');
            } else if (action === 'upload_r2') {
                $.post(API + '&s=upload_r2_from_local', {
                    path,
                    mode: 'enqueue'
                }, res => {
                    if (res && res.status === 200) {
                        pos5_success_noti(res.message || 'Queued for R2 upload');
                    } else {
                        pos4_error_noti(res.error || 'Failed to queue upload');
                    }
                }, 'json');
            } else if (action === 'preview' && type === 'file') {
                const fileName = path.split('/').pop();
                window.fileManagerAPI = API;
                if (typeof window.openAdvancedFilePreview === 'function') {
                    window.openAdvancedFilePreview(path, fileName);
                } else {
                    openPreview(path);
                }
            }
        }
    });

    function openPreview(path) {
        $('#fm-preview-modal').addClass('active');
        $('#fm-preview-title').text(path.split('/').pop());
        const ext = path.split('.').pop().toLowerCase();
        const url = API + '&s=download_local&file=' + encodeURIComponent(path);

        if (['png', 'jpg', 'jpeg', 'gif', 'webp'].includes(ext)) {
            $('#fm-preview-area').html(`<img src="${url}" style="max-width:100%;border-radius:8px">`);
        } else if (ext === 'pdf') {
            $('#fm-preview-area').html(
                `<iframe src="${url}" style="width:100%;height:600px;border:0"></iframe>`);
        } else {
            $('#fm-preview-area').html(
                `<p>Preview not available. <a href="${url}" target="_blank">Download file</a></p>`);
        }
    }

    let previewModalOpen = false;
    let editingFile = false;

    $(document).on('keydown', function(e) {
        if (previewModalOpen && editingFile) {
            return;
        }

        if (previewModalOpen && e.key === 'Escape') {
            return;
        }

        if (e.key === 'Delete' && selected.size > 0 && !previewModalOpen) {
            if (confirm(`Delete ${selected.size} selected item(s)?`)) {
                const paths = Array.from(selected);
                let completed = 0;
                paths.forEach(path => {
                    $.post(API + '&s=delete_local', {
                        path
                    }, () => {
                        completed++;
                        if (completed === paths.length) {
                            selected.clear();
                            loadFolder(currentPath);
                        }
                    }, 'json');
                });
            }
        } else if ((e.ctrlKey || e.metaKey) && e.key === 'a' && !previewModalOpen) {
            e.preventDefault();
            $('.fm-item-card[data-type="file"], .fm-list-item[data-type="file"]').each(function() {
                const path = $(this).data('path');
                selected.add(path);
                $(this).addClass('selected').find('.fm-item-checkbox').prop('checked', true);
            });
            updateStats();
        } else if (e.key === 'Escape' && !previewModalOpen) {
            selected.clear();
            $('.fm-item-card, .fm-list-item').removeClass('selected').find('.fm-item-checkbox').prop(
                'checked', false);
            updateStats();
        }
    });

    window.setPreviewModalState = function(isOpen, isEditing) {
        previewModalOpen = isOpen;
        editingFile = isEditing || false;
    };

    loadFolder('');
    loadQuota();
    checkR2();
});
</script>